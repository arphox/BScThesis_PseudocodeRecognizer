<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArrayForIf" xml:space="preserve">
    <value>program_kezd
egész x=2
ha x&gt;=2 akkor
	kiír "x nem kisebb kettőnél..."
különben
	kiír "x kisebb, mint kettő!"
elágazás_vége
egész[] y = létrehoz(egész)[10]
ciklus egész i=0-tól 9-ig
	y[i]=i
	kiír y[i]
ciklus_vége
program_vége</value>
    <comment>deklarációt, szelekciót, számlálós ciklust, tömbkezelést tartalmazó kód</comment>
  </data>
  <data name="DeepBlocks" xml:space="preserve">
    <value>program_kezd

egész[] tömb = létrehoz(egész)[10]

egész a = 2
ciklus egész aa = 0-tól aa &lt; 9-ig
	tört aaa = 2,4
ciklus_vége


egész b = 0
ciklus egész bb = 0-tól bb &lt; 9-ig
	szöveg bbb = "alma"
	ha bb mod 2 == 0 akkor
		szöveg bbbb = "asd"
	elágazás_vége
ciklus_vége

egész c = 0
ciklus_amíg c &lt; 2
	egész ccc = 2
	ha ccc == 3 akkor
		ciklus egész cccc = 1-től cccc &lt; 10-ig
			tört ccccc = 3,14
			ciklus_amíg ccc &gt; 2
				ccc = ccc - 2
			ciklus_vége
			egész ccccc2
		ciklus_vége
		logikai l = hamis
	elágazás_vége
	szöveg sz = "haha"
ciklus_vége
program_vége</value>
    <comment>mélyen egymásba épített blokkokat, azokon belül deklarációkat (szimbólumtáblát) tartalmazó kód</comment>
  </data>
  <data name="Expressions" xml:space="preserve">
    <value>program_kezd
logikai éhes = igaz
ha éhes == igaz vagy hamis akkor
	kiír "menj enni!"
elágazás_vége
szöveg konkatenált = "valami"."mégvalami"." "."még valami"
tört törtpélda=(+-6,0*+++10-(--0,3*+4,1)/--28,3-4)
kiír törtpélda
program_vége</value>
    <comment>összetett aritmetikai kifejezéseket tartalmazó kód</comment>
  </data>
  <data name="For" xml:space="preserve">
    <value>program_kezd
szöveg x="alma"
ciklus egész i=1-től i&lt;10-ig
	kiír x
ciklus_vége
program_vége</value>
    <comment>számlálós ciklust tartalmazó kód</comment>
  </data>
  <data name="InternalFunctions" xml:space="preserve">
    <value>program_kezd

egész[] tömb = létrehoz(egész)[10]
egész a = törtből_egészbe(tömb[0] * 2,5) + logikaiból_egészbe(igaz)
szöveg sz = szövegből_egészbe(a)
logikai log = igaz
tört tttt = logikaiból_törtbe(log)
tttt = szövegből_törtbe(sz)
log = egészből_logikaiba(123231)
ciklus egész b = 0-tól b &lt; 9-ig
	logikai xxxxxxxx = törtből_logikaiba(0,0)
ciklus_vége
szöveg sx = "hamis"
log = szövegből_logikaiba(sx)
program_vége</value>
    <comment>beépített függvényeket tartalmazó kód</comment>
  </data>
  <data name="Masodfoku" xml:space="preserve">
    <value>program_kezd
	egész a
	beolvas a
	egész b
	beolvas b
	egész c
	beolvas c
	tört diszkrimináns=b*b-(4*a*c)
	ha diszkrimináns&lt;0,0 akkor
		kiír "Nincs valós gyöke!"
	különben
		kiír "Van legalább egy valós gyöke!"
	elágazás_vége
program_vége</value>
    <comment>deklarációkat, beolvasást, szelekciót tartalmazó kód</comment>
  </data>
  <data name="MultipleStart" xml:space="preserve">
    <value>program_kezd
egész x = 2
program_kezd
x = x + 1
program_vége</value>
    <comment>többszörös program_kezd sorokat egymás után tartalmazó kód</comment>
  </data>
  <data name="NoType" xml:space="preserve">
    <value>program_kezd
x = x + 1
program_vége</value>
    <comment>nem deklarált változóhasználatot tartalmazó kód</comment>
  </data>
  <data name="Redeclaration" xml:space="preserve">
    <value>program_kezd
egész a
egész b
logikai a
egész[] tömb = létrehoz(egész)[10]
szöveg error
logikai lenniVAGYnemLENNI
tört burgonya = 2,3
program_vége</value>
    <comment>változó újradeklarálását tartalmazó kód</comment>
  </data>
  <data name="SimpleTheorems" xml:space="preserve">
    <value>program_kezd

egész[] tömb = létrehoz(egész)[10]

ciklus egész i=0-tól i&lt;9-ig
	tömb[i] = i*10
	kiír tömb[i]
ciklus_vége



egész db=0
ciklus egész i=0-tól i&lt;9-ig
	ha tömb[i]mod 2==0 akkor
		db=db+1
	elágazás_vége
ciklus_vége
kiír "Ennyi darab páros \"szám van: ".db

egész maxi=0
ciklus egész i=0-tól i&lt;9-ig
	ha tömb[i]&gt;tömb[maxi]
		maxi=i
	elágazás_vége
ciklus_vége
kiír "A maximális elem: tömb[".maxi."]=".tömb[maxi]
egész xxx = szövegből_egészbe("10")
program_vége</value>
    <comment>egymásba épített blokkokat, szelekciót, tömbkezelést tartalmazó kód</comment>
  </data>
  <data name="UnknownSymbol" xml:space="preserve">
    <value>program_kezd
egész x = 2;
egész y = 3;
y = x + y;
x = x + 1;
program_vége</value>
    <comment>a nyelvben nem létező lexikális elemet (;) tartalmazó kód</comment>
  </data>
</root>